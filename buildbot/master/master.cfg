# -*- python -*-
# ex: set syntax=python:

from passwords import HTTP_USERNAME, HTTP_PASSWORD, SLAVE_PASSWORD, CHANGE_PASSWORD
from passwords import GITHUB_DOC_TOKEN, GITHUB_STATUS_TOKEN

SERVO_REPO = "https://github.com/servo/servo"
LINUX_SLAVES = ["servo-linux1"]
MAC_SLAVES = ["servo-mac1", "servo-mac2"]
ANDROID_SLAVES = ["servo-linux-android1"]

c = BuildmasterConfig = {}

c['caches'] = {
    'Changes': 1000,
    'Builds': 100,
    'chdicts': 1000,
}

####### BUILDSLAVES
from buildbot.buildslave import BuildSlave

c['slavePortnum'] = 9001
c['slaves'] = []
for s in LINUX_SLAVES + MAC_SLAVES + ANDROID_SLAVES:
    c['slaves'].append(BuildSlave(s, SLAVE_PASSWORD, max_builds=1))

####### CHANGESOURCES
from buildbot.changes.pb import PBChangeSource

#def branch_filter(b):
#    # grab bors-servo-integration-* and master
#    if b == 'refs/heads/master' or b.startswith('refs/heads/bors-servo-integration-'):
#        return True
#    return False

c['change_source'] = []
c['change_source'].append(PBChangeSource(passwd=CHANGE_PASSWORD))
#c['change_source'].append(GitPoller(
#    SERVO_REPO,
#    workdir='gitpoller-workdir',
#    branches=branch_filter,
#    pollinterval=60
#))

####### SCHEDULERS
from buildbot.schedulers.basic import AnyBranchScheduler, SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes.filter import ChangeFilter

def bors_filter(c):
    if c.who.startswith('bors-servo') and \
      (c.branch == "auto" or c.branch.startswith("bors-servo-integration-")):
        return True
    return False

def bors_master_filter(c):
    if c.who.startswith('bors-servo') and c.branch == "master":
        return True
    return False

c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
    name="auto",
    treeStableTimer=None,
    builderNames=["linux", "mac1", "mac2", "android"],
    change_filter=ChangeFilter(filter_fn=bors_filter),
))
c['schedulers'].append(SingleBranchScheduler(
    name="doc-push",
    treeStableTimer=None,
    builderNames=["doc"],
    change_filter=ChangeFilter(filter_fn=bors_master_filter),
))
c['schedulers'].append(ForceScheduler(
    name="force",
    builderNames=["linux", "mac1", "mac2", "android"]
))

####### BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.slave import RemoveDirectory

common_test_env = {
    'RUST_BACKTRACE': '1'
}

linux_test_env = dict({'DISPLAY': ':0'}, **common_test_env)

linux_factory = BuildFactory()
linux_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
linux_factory.addStep(ShellCommand(command=["./mach", "test-tidy"]))
linux_factory.addStep(Compile(command=["./mach", "build"]))
linux_factory.addStep(ShellCommand(command=["./mach", "test-unit"], env=linux_test_env))
linux_factory.addStep(ShellCommand(command=["./mach", "test-content"], env=linux_test_env))
linux_factory.addStep(ShellCommand(command=["./mach", "test-ref", "--kind", "cpu"],
                                   env=linux_test_env))
linux_factory.addStep(ShellCommand(command=["./mach", "test-wpt", "--processes", "4"],
                                   env=linux_test_env))
linux_factory.addStep(Compile(command=["./mach", "build-cef"]))

task_limited_test_env = dict({'RUST_TEST_TASKS': '1'}, **common_test_env)

mac1_factory = BuildFactory()
mac1_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
mac1_factory.addStep(ShellCommand(command=["./mach", "test-tidy"]))
mac1_factory.addStep(Compile(command=["./mach", "build"]))
mac1_factory.addStep(ShellCommand(command=["./mach", "test-wpt", "--processes", "1", "--total-chunks", "2", "--this-chunk", "1"],
                                 env=common_test_env))
mac1_factory.addStep(ShellCommand(command=["./mach", "test-unit"], env=common_test_env))
mac1_factory.addStep(Compile(command=["./mach", "build-cef"]))

mac2_factory = BuildFactory()
mac2_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
mac2_factory.addStep(Compile(command=["./mach", "build"]))
mac2_factory.addStep(ShellCommand(command=["./mach", "test-content"], env=common_test_env))
mac2_factory.addStep(ShellCommand(command=["./mach", "test-ref", "--kind", "cpu"],
                                 env=task_limited_test_env))
mac2_factory.addStep(ShellCommand(command=["./mach", "test-wpt", "--processes", "1", "--total-chunks", "2", "--this-chunk", "2"],
                                 env=common_test_env))

android_compile_env = dict({'ANDROID_SDK': '/home/servo/android-sdk-linux/',
                            'ANDROID_NDK': '/home/servo/android-ndk-r10c/',
                            'ANDROID_TOOLCHAIN': '/home/servo/ndk-toolchain/',
                            'PATH': '/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin:/home/servo/android-sdk-linux/platform-tools:/home/servo/ndk-toolchain/bin'},
                           **common_test_env)
android_factory = BuildFactory()
android_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
android_factory.addStep(Compile(command=["./mach", "build", "--android"], env=android_compile_env))

doc_factory = BuildFactory()
doc_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
doc_factory.addStep(ShellCommand(command=["etc/ci/upload_docs.sh"],
                                 env={'TOKEN': GITHUB_DOC_TOKEN},
                                 logEnviron=False)) # important not to leak token

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(BuilderConfig(
    name="linux",
    slavenames=LINUX_SLAVES,
    factory=linux_factory,
))
c['builders'].append(BuilderConfig(
    name="android",
    slavenames=ANDROID_SLAVES,
    factory=android_factory,
    category="TESTING",
))
c['builders'].append(BuilderConfig(
    name="mac1",
    slavenames=MAC_SLAVES,
    factory=mac1_factory,
))
c['builders'].append(BuilderConfig(
    name="mac2",
    slavenames=MAC_SLAVES,
    factory=mac2_factory,
))
c['builders'].append(BuilderConfig(
    name="doc",
    slavenames=[LINUX_SLAVES[0]],
    factory=doc_factory,
))


####### STATUS TARGETS
c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.github import GitHubStatus

authz_cfg=authz.Authz(
    auth=auth.BasicAuth([(HTTP_USERNAME, HTTP_PASSWORD)]),
    gracefulShutdown = True,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

c['status'].append(GitHubStatus(
    token=GITHUB_STATUS_TOKEN,
    repoOwner="servo",
    repoName="servo",
    startDescription="Build started",
    endDescription="Build complete"
))

####### PROJECT IDENTITY
c['title'] = "Servo"
c['titleURL'] = "http://github.com/servo/servo"
c['buildbotURL'] = "http://build.servo.org/"

####### DB URL
c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
