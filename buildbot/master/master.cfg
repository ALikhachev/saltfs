# -*- python -*-
# ex: set syntax=python:

from passwords import HTTP_USERNAME, HTTP_PASSWORD, SLAVE_PASSWORD, CHANGE_PASSWORD
from passwords import GITHUB_DOC_TOKEN, GITHUB_STATUS_TOKEN, HOMU_BUILDBOT_SECRET

SERVO_REPO = "https://github.com/servo/servo"
HEAD_SLAVES = ["servo-head"]
LINUX_SLAVES = ["servo-linux1", "servo-linux2", "servo-linux3"]
MAC_SLAVES = ["servo-mac1", "servo-mac2", "servo-mac3"]
ANDROID_SLAVES = ["servo-linux-android1"]

c = BuildmasterConfig = {}

c['caches'] = {
    'Changes': 1000,
    'Builds': 100,
    'chdicts': 1000,
}

####### BUILDSLAVES
from buildbot.buildslave import BuildSlave

c['slavePortnum'] = 9001
c['slaves'] = []
for s in LINUX_SLAVES + MAC_SLAVES + ANDROID_SLAVES + HEAD_SLAVES:
    c['slaves'].append(BuildSlave(s, SLAVE_PASSWORD, max_builds=1))

####### CHANGESOURCES
from buildbot.changes.pb import PBChangeSource

#def branch_filter(b):
#    # grab bors-servo-integration-* and master
#    if b == 'refs/heads/master' or b.startswith('refs/heads/bors-servo-integration-'):
#        return True
#    return False

c['change_source'] = []
# DISABLED PbChangeSource because homu generates commit-less pushes to 'auto',
# which the github webhook drops
# c['change_source'].append(PBChangeSource(passwd=CHANGE_PASSWORD))

from buildbot.changes.gitpoller import GitPoller
all_branches = ["auto", "master", "try"]
c['change_source'].append(GitPoller(
    SERVO_REPO,
    workdir='gitpoller-workdir',
    branches=all_branches,
    pollinterval=60
))

####### SCHEDULERS
from buildbot.schedulers.basic import AnyBranchScheduler, SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.changes.filter import ChangeFilter

def bors_filter(c):
    if (c.who.startswith('bors-servo') or c.who.startswith('larsbergstrom')) and \
      (c.branch in ["auto", "try"] or c.branch.startswith("bors-servo-integration-")):
        return True
    return False

def bors_master_filter(c):
    if c.who.startswith('bors-servo') and c.branch == "master":
        return True
    return False

c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
    name="auto",
    treeStableTimer=None,
    builderNames=["linux1", "linux2", "linux3", "mac1", "mac2", "mac3", "android", "gonk"],
    change_filter=ChangeFilter(filter_fn=bors_filter),
))
c['schedulers'].append(SingleBranchScheduler(
    name="doc-push",
    treeStableTimer=None,
    builderNames=["doc"],
    change_filter=ChangeFilter(filter_fn=bors_master_filter),
))
c['schedulers'].append(ForceScheduler(
    name="force",
    builderNames=["linux1", "linux2", "linux3", "mac1", "mac2", "mac3", "android", "gonk", "linux1-rel", "linux2-rel", "mac1-rel", "mac2-rel","android-nightly"]
))
c['schedulers'].append(Nightly(
    name="Nightly",
    branch="master",
    builderNames=["android-nightly"],
    hour=1,
    minute=0
))
####### BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.status.builder import SUCCESS

common_test_env = {
    'RUST_BACKTRACE': '1'
}

linux_test_env = dict({
    'DISPLAY': ':0',
    'CARGO_HOME': '/home/servo/.cargo',
    'SERVO_CACHE_DIR': '/home/servo/.servo',
    'SHELL': '/bin/bash'
}, **common_test_env)
linux_headless_env = dict({'SERVO_HEADLESS': '1'}, **linux_test_env)

mac_test_env = dict({
    'CARGO_HOME': '/Users/servo/.cargo',
    'SERVO_CACHE_DIR': '/Users/servo/.servo'
}, **common_test_env)

linux1_factory = BuildFactory()
linux1_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
linux1_factory.addStep(ShellCommand(command=["./mach", "test-tidy"], env=linux_headless_env))
linux1_factory.addStep(Compile(command=["./mach", "build", "--dev"], env=linux_headless_env))
linux1_factory.addStep(ShellCommand(command=["./mach", "test-unit"], env=linux_headless_env))
linux1_factory.addStep(ShellCommand(command=["./mach", "test-ref", "--kind", "cpu"],
                                    env=linux_headless_env))


linux2_factory = BuildFactory()
linux2_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
linux2_factory.addStep(Compile(command=["./mach", "build", "--dev"], env=linux_headless_env))
linux2_factory.addStep(ShellCommand(command=["./mach", "test-wpt-failure"],
                                    env=linux_headless_env))
linux2_factory.addStep(ShellCommand(command=["./mach", "test-wpt", "--processes", "4",
                                             "--log-raw", "wpt_raw.log"],
                                    env=linux_headless_env,
                                    logfiles={"wpt_raw.log": "wpt_raw.log"}))
linux2_factory.addStep(Compile(command=["./mach", "build-cef"], env=linux_headless_env))

linux3_factory = BuildFactory()
linux3_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
linux3_factory.addStep(Compile(command=["./mach", "build", "--release"], env=linux_headless_env))
linux3_factory.addStep(ShellCommand(command=["./mach", "test-css", "--release", "--processes", "4",
                                             "--log-raw", "wpt_raw.log"],
                                    env=linux_headless_env,
                                    logfiles={"wpt_raw.log": "wpt_raw.log"}))


task_limited_test_env = dict({'RUST_TEST_TASKS': '1'}, **mac_test_env)

mac1_factory = BuildFactory()
mac1_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
mac1_factory.addStep(ShellCommand(command=["./mach", "test-tidy"]))
mac1_factory.addStep(Compile(command=["./mach", "build", "--dev"], env=mac_test_env))
mac1_factory.addStep(ShellCommand(command=["./mach", "test-wpt-failure"],
                                  env=mac_test_env))
mac1_factory.addStep(ShellCommand(command=["./mach", "test-wpt", "--processes", "4",
                                           "--log-raw", "wpt_raw.log"],
                                  env=mac_test_env,
                                  logfiles={"wpt_raw.log": "wpt_raw.log"}))
mac1_factory.addStep(ShellCommand(command=["./mach", "test-unit"], env=mac_test_env))

mac2_factory = BuildFactory()
mac2_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
mac2_factory.addStep(Compile(command=["./mach", "build", "--dev"], env=mac_test_env))
mac2_factory.addStep(ShellCommand(command=["./mach", "test-ref", "--kind", "cpu"],
                                 env=task_limited_test_env))
mac2_factory.addStep(Compile(command=["./mach", "build-cef"], env=mac_test_env))

mac3_factory = BuildFactory()
mac3_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
mac3_factory.addStep(Compile(command=["./mach", "build", "--release"], env=mac_test_env))
mac3_factory.addStep(ShellCommand(command=["./mach", "test-css", "--release", "--processes", "4",
                                           "--log-raw", "wpt_raw.log"],
                                  env=mac_test_env,
                                  logfiles={"wpt_raw.log": "wpt_raw.log"}))

android_compile_env = dict({'ANDROID_SDK': '/home/servo/android-sdk-linux/',
                            'ANDROID_NDK': '/home/servo/android-ndk-r10c/',
                            'ANDROID_TOOLCHAIN': '/home/servo/ndk-toolchain/',
                            'PATH': '/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin:/home/servo/android-sdk-linux/platform-tools:/home/servo/ndk-toolchain/bin'},
                           **linux_test_env)
android_factory = BuildFactory()
android_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
android_factory.addStep(Compile(command=["./mach", "build", "--android", "--dev"], env=android_compile_env))

android_nightly_factory = BuildFactory()
android_nightly_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
android_nightly_factory.addStep(Compile(command=["./mach", "build", "--android", "--release"], env=android_compile_env))
android_nightly_factory.addStep(ShellCommand(command=["s3cmd", "put", "/home/servo/buildbot/slave/android-nightly/build/components/servo/target/arm-linux-androideabi/release/servo",  "s3://servo-rust/nightly/servo.apk"]))

gonk_compile_env = dict({'ANDROID_SDK': '/home/servo/android-sdk-linux/',
                         'ANDROID_NDK': '/home/servo/android-ndk-r10c/',
                         'ANDROID_TOOLCHAIN': '/home/servo/ndk-toolchain/',
                         'GONKDIR': '/home/servo/B2G/',
                         'PATH': '/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin:/home/servo/B2G/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.7/bin'},
                        **linux_test_env)

gonk_factory = BuildFactory()
gonk_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
gonk_factory.addStep(Compile(command=["./mach", "build-gonk"], env=gonk_compile_env))

doc_factory = BuildFactory()
doc_factory.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
doc_factory.addStep(ShellCommand(command=["etc/ci/upload_docs.sh"],
                                 env={'TOKEN': GITHUB_DOC_TOKEN, 'CARGO_HOME': '/home/servo/.cargo',
                                      'SERVO_CACHE_DIR': '/home/servo/.servo'},
                                 logEnviron=False)) # important not to leak token


# Release builds


linux1_factory_rel = BuildFactory()
linux1_factory_rel.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
linux1_factory_rel.addStep(ShellCommand(command=["./mach", "test-tidy"], env=linux_headless_env))
linux1_factory_rel.addStep(Compile(command=["./mach", "build", "--release"], env=linux_headless_env))
# https://github.com/rust-lang/cargo/issues/691
# linux1_factory_rel.addStep(ShellCommand(command=["./mach", "test-unit"], env=linux_headless_env))
linux1_factory_rel.addStep(ShellCommand(command=["./mach", "test-content"], env=linux_headless_env))
linux1_factory_rel.addStep(ShellCommand(command=["./mach", "test-ref", "--kind", "cpu"],
                                    env=linux_headless_env))


linux2_factory_rel = BuildFactory()
linux2_factory_rel.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
linux2_factory_rel.addStep(Compile(command=["./mach", "build", "--release"], env=linux_test_env))
linux2_factory_rel.addStep(ShellCommand(command=["./mach", "test-wpt-failure"],
                                    env=linux_test_env))
linux2_factory_rel.addStep(ShellCommand(command=["./mach", "test-wpt", "--release",
                                                 "--processes", "4",
                                                 "--log-raw", "wpt_raw.log"],
                                        env=linux_test_env,
                                        logfiles={"wpt_raw.log": "wpt_raw.log"}))
linux2_factory_rel.addStep(Compile(command=["./mach", "build-cef", "--release"]))

mac1_factory_rel = BuildFactory()
mac1_factory_rel.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
mac1_factory_rel.addStep(ShellCommand(command=["./mach", "test-tidy"]))
mac1_factory_rel.addStep(Compile(command=["./mach", "build", "--release"]))
mac1_factory_rel.addStep(ShellCommand(command=["./mach", "test-wpt-failure"],
                                  env=common_test_env))
mac1_factory_rel.addStep(ShellCommand(command=["./mach", "test-wpt", "--release", "--processes", "4", "--total-chunks", "2", "--this-chunk", "1", "--log-raw", "wpt_raw.log"],
                                      env=common_test_env,
                                      logfiles={"wpt_raw.log": "wpt_raw.log"}))
# https://github.com/rust-lang/cargo/issues/691
# mac1_factory_rel.addStep(ShellCommand(command=["./mach", "test-unit"], env=common_test_env))
mac1_factory_rel.addStep(Compile(command=["./mach", "build-cef"]))

mac2_factory_rel = BuildFactory()
mac2_factory_rel.addStep(Git(repourl=SERVO_REPO, mode="full", method="clobber"))
mac2_factory_rel.addStep(Compile(command=["./mach", "build", "--release"]))
mac2_factory_rel.addStep(ShellCommand(command=["./mach", "test-content"], env=common_test_env))
mac2_factory_rel.addStep(ShellCommand(command=["./mach", "test-ref", "--kind", "cpu"],
                                 env=task_limited_test_env))
mac2_factory_rel.addStep(ShellCommand(command=["./mach", "test-wpt", "--processes", "4", "--total-chunks", "2", "--this-chunk", "2", "--log-raw", "wpt_raw.log"],
                                      env=common_test_env,
                                      logfiles={"wpt_raw.log": "wpt_raw.log"}))
from buildbot.config import BuilderConfig

def branch_priority(builder, requests):
    for r in requests:
        if r.source.branch != "try":
            return r
    return requests[0]

c['builders'] = []
c['builders'].append(BuilderConfig(
    name="linux1",
    slavenames=LINUX_SLAVES,
    factory=linux1_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(BuilderConfig(
    name="linux2",
    slavenames=LINUX_SLAVES,
    factory=linux2_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(BuilderConfig(
    name="linux3",
    slavenames=LINUX_SLAVES,
    factory=linux3_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(BuilderConfig(
    name="android",
    slavenames=ANDROID_SLAVES,
    factory=android_factory,
    nextBuild=branch_priority,
    category="auto",
))
# NOTE: gonk currently shares the android builder.
c['builders'].append(BuilderConfig(
    name="gonk",
    slavenames=ANDROID_SLAVES,
    factory=gonk_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(BuilderConfig(
    name="mac1",
    slavenames=MAC_SLAVES,
    factory=mac1_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(BuilderConfig(
    name="mac2",
    slavenames=MAC_SLAVES,
    factory=mac2_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(BuilderConfig(
    name="mac3",
    slavenames=MAC_SLAVES,
    factory=mac3_factory,
    nextBuild=branch_priority,
    category="auto",
))
c['builders'].append(BuilderConfig(
    name="doc",
    slavenames=HEAD_SLAVES,
    factory=doc_factory,
    category="auto",
))
c['builders'].append(BuilderConfig(
    name="linux1-rel",
    slavenames=LINUX_SLAVES,
    factory=linux1_factory_rel,
    nextBuild=branch_priority,
    category="release",
))
c['builders'].append(BuilderConfig(
    name="linux2-rel",
    slavenames=LINUX_SLAVES,
    factory=linux2_factory_rel,
    nextBuild=branch_priority,
    category="release",
))
c['builders'].append(BuilderConfig(
    name="mac1-rel",
    slavenames=MAC_SLAVES,
    factory=mac1_factory_rel,
    nextBuild=branch_priority,
    category="release",
))
c['builders'].append(BuilderConfig(
    name="mac2-rel",
    slavenames=MAC_SLAVES,
    factory=mac2_factory_rel,
    nextBuild=branch_priority,
    category="release",
))
c['builders'].append(BuilderConfig(
    name="android-nightly",
    slavenames=HEAD_SLAVES,
    factory=android_nightly_factory,
    nextBuild=branch_priority,
    category="auto",
))

####### STATUS TARGETS
from buildbot.status.status_push import HttpStatusPush

c['status'] = []
c['status'].append(HttpStatusPush(
    serverUrl='http://build.servo.org:54856/buildbot',
    extra_post_params={'secret': HOMU_BUILDBOT_SECRET},
))

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    auth=auth.BasicAuth([(HTTP_USERNAME, HTTP_PASSWORD)]),
    gracefulShutdown = True,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY
c['title'] = "Servo"
c['titleURL'] = "http://github.com/servo/servo"
c['buildbotURL'] = "http://build.servo.org/"

####### DB URL
c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
